@page "/jugadores/index"

@inject JugadoresService JugadorsService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Registro de Jugadores</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header space-between">
            <h5 class="card-title">Registro de Jugadores</h5>
            <a href="/jugadores/Create" class="btn btn-primary"><span class="bi bi-plus-square mt-3"></span>  Crear</a>
        </div>

        <div class="card-body">

            @*labels*@
            <div class="row">

                @*Filtar por*@
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>

                @*ValorFiltro*@
                <div class="col-4">
                    <label class="col-form-label"><strong>B&uacute;squeda</strong></label>
                </div>
            </div>

            @*Inputs y botones*@
            <div class="row align-items-center">
                @*filtro*@
                <div class="col-3">
                    <InputSelect class="form-select" @bind-value="Filtro">
                        <option value="" selected disabled>Seleccione </option>
                        <option value="nombres">Nombres</option>
                        <option value="victorias">Victorias</option>
                        <option value="Empate">Empates</option>
                        <option value="Derrotas">Derrotas</option>
                    </InputSelect>
                </div>


                @*Busqueda*@
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                    </div>
                </div>

                @*Restaurar*@
                <div class="col-2">
                    <button type="button" class="btn btn-outline-primary bi bi-arrow-counterclockwise" @onclick="Restablecer"></button>
                </div>

                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>JugadorId</th>
                            <th>Nombres</th>
                            <th>Victorias</th>
                            <th>Empates</th>
                            <th>Derrotas</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var jugador in ListaJugadores)
                        {
                            <tr>
                                <td>@jugador.JugadorId</td>
                                <td>@jugador.nombres</td>
                                <td>@jugador.victorias</td>
                                <td>@jugador.Empate</td>
                                <td>@jugador.Derrotas</td>


                                <td class="text-center">
                                    <a href="/Jugador/Edit/@jugador.JugadorId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>


            </div>

            <div class="card-footer space-between">
                <label class="ms-3"><strong>Cantidad: </strong> @ListaJugadores.Count()</label>
                <div class="col-8">
                    <label class="ms-5"><strong>Total Victorias: </strong>@ListaJugadores.Sum(jugador => jugador.victorias)</label>
                    <label class="ms-5"><strong>Total Empates: </strong>@ListaJugadores.Sum(jugador => jugador.Empate)</label>
                    <label class="ms-5"><strong>Total Derrotas: </strong>@ListaJugadores.Sum(jugador => jugador.Derrotas)</label>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores = await JugadorsService.Listar(j => j.JugadorId > 0);
    }

    private async Task Buscar()
    {
        if (ValorFiltro.Trim() != "")
        {
            if (Filtro == nameof(Jugadores.nombres))
            {
                ListaJugadores = await JugadorsService.Listar(j => j.nombres.ToLower().Contains(ValorFiltro.ToLower()));
            }
            else if (Filtro == nameof(Jugadores.victorias) && int.TryParse(ValorFiltro, out var victorias))
            {
                ListaJugadores = await JugadorsService.Listar(jugador => jugador.victorias == victorias);
            }
            else if (Filtro == nameof(Jugadores.Derrotas) && int.TryParse(ValorFiltro, out var Derrotas))
            {
                ListaJugadores = await JugadorsService.Listar(jugador => jugador.Derrotas == Derrotas);
            }
            else if (Filtro == nameof(Jugadores.Empate) && int.TryParse(ValorFiltro, out var Empates))
            {
                ListaJugadores = await JugadorsService.Listar(jugador => jugador.Empate == Empates);
            }
        }
    }

    private async Task Restablecer()
    {
        ListaJugadores = await JugadorsService.Listar(j => j.JugadorId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }

}